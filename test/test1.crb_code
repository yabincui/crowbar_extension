FUNCTION f1
 PARAMETER repeat_time
 PARAMETER str
 BLOCK
  IF_STATEMENT NOT_HAVE_NEXT
   GT_EXPRESSION
    IDENTIFIER_EXPRESSION repeat_time
    INT_EXPRESSION 0
   BLOCK_STATEMENT
    BLOCK
     EXPRESSION_STATEMENT
      FUNCTION_CALL_EXPRESSION print 1
       ARGUMENT
        ADD_EXPRESSION
         ADD_EXPRESSION
          ADD_EXPRESSION
           ADD_EXPRESSION
            STRING_EXPRESSION "repeat_time: "
            IDENTIFIER_EXPRESSION repeat_time
           STRING_EXPRESSION " "
          IDENTIFIER_EXPRESSION str
         STRING_EXPRESSION "
"
     EXPRESSION_STATEMENT
      FUNCTION_CALL_EXPRESSION f1 2
       ARGUMENT
        SUB_EXPRESSION
         IDENTIFIER_EXPRESSION repeat_time
         INT_EXPRESSION 1
       ARGUMENT
        IDENTIFIER_EXPRESSION str
    END_BLOCK
 END_BLOCK
EXPRESSION_STATEMENT
 ASSIGN_EXPRESSION
  IDENTIFIER_EXPRESSION a
  INT_EXPRESSION 20
IF_STATEMENT HAVE_NEXT
 EQ_EXPRESSION
  MOD_EXPRESSION
   IDENTIFIER_EXPRESSION a
   INT_EXPRESSION 3
  INT_EXPRESSION 0
 EXPRESSION_STATEMENT
  FUNCTION_CALL_EXPRESSION print 1
   ARGUMENT
    STRING_EXPRESSION "a%3==0
"
 ELSE
  IF_STATEMENT HAVE_NEXT
   EQ_EXPRESSION
    MOD_EXPRESSION
     IDENTIFIER_EXPRESSION a
     INT_EXPRESSION 4
    INT_EXPRESSION 0
   EXPRESSION_STATEMENT
    FUNCTION_CALL_EXPRESSION print 1
     ARGUMENT
      STRING_EXPRESSION "a%4==0
"
   ELSE
    IF_STATEMENT HAVE_NEXT
     EQ_EXPRESSION
      MOD_EXPRESSION
       IDENTIFIER_EXPRESSION a
       INT_EXPRESSION 5
      INT_EXPRESSION 0
     EXPRESSION_STATEMENT
      FUNCTION_CALL_EXPRESSION print 1
       ARGUMENT
        STRING_EXPRESSION "a%5==0
"
     ELSE
      EXPRESSION_STATEMENT
       FUNCTION_CALL_EXPRESSION print 1
        ARGUMENT
         ADD_EXPRESSION
          ADD_EXPRESSION
           STRING_EXPRESSION "a=="
           IDENTIFIER_EXPRESSION a
          STRING_EXPRESSION "
"
IF_STATEMENT HAVE_NEXT
 EQ_EXPRESSION
  MOD_EXPRESSION
   IDENTIFIER_EXPRESSION a
   INT_EXPRESSION 3
  INT_EXPRESSION 0
 EXPRESSION_STATEMENT
  FUNCTION_CALL_EXPRESSION print 1
   ARGUMENT
    STRING_EXPRESSION "a%3==0
"
 ELSIF HAVE_NEXT
  EQ_EXPRESSION
   MOD_EXPRESSION
    IDENTIFIER_EXPRESSION a
    INT_EXPRESSION 4
   INT_EXPRESSION 0
  EXPRESSION_STATEMENT
   FUNCTION_CALL_EXPRESSION print 1
    ARGUMENT
     STRING_EXPRESSION "a%4==0
"
 ELSIF HAVE_NEXT
  EQ_EXPRESSION
   MOD_EXPRESSION
    IDENTIFIER_EXPRESSION a
    INT_EXPRESSION 5
   INT_EXPRESSION 0
  EXPRESSION_STATEMENT
   FUNCTION_CALL_EXPRESSION print 1
    ARGUMENT
     STRING_EXPRESSION "a%5==0
"
 ELSE
  EXPRESSION_STATEMENT
   FUNCTION_CALL_EXPRESSION print 1
    ARGUMENT
     ADD_EXPRESSION
      ADD_EXPRESSION
       STRING_EXPRESSION "a=="
       IDENTIFIER_EXPRESSION a
      STRING_EXPRESSION "
"
FOR_STATEMENT
 INIT
  ASSIGN_EXPRESSION
   IDENTIFIER_EXPRESSION i
   INT_EXPRESSION 0
 CONDITION
  LT_EXPRESSION
   IDENTIFIER_EXPRESSION i
   INT_EXPRESSION 5
 POST
  ASSIGN_EXPRESSION
   IDENTIFIER_EXPRESSION i
   ADD_EXPRESSION
    IDENTIFIER_EXPRESSION i
    INT_EXPRESSION 1
 EXPRESSION_STATEMENT
  FUNCTION_CALL_EXPRESSION print 1
   ARGUMENT
    ADD_EXPRESSION
     ADD_EXPRESSION
      STRING_EXPRESSION "i="
      IDENTIFIER_EXPRESSION i
     STRING_EXPRESSION "
"
EXPRESSION_STATEMENT
 ASSIGN_EXPRESSION
  IDENTIFIER_EXPRESSION i
  INT_EXPRESSION 0
WHILE_STATEMENT
 LT_EXPRESSION
  IDENTIFIER_EXPRESSION i
  INT_EXPRESSION 5
 EXPRESSION_STATEMENT
  ASSIGN_EXPRESSION
   IDENTIFIER_EXPRESSION i
   ADD_EXPRESSION
    IDENTIFIER_EXPRESSION i
    INT_EXPRESSION 1
EXPRESSION_STATEMENT
 FUNCTION_CALL_EXPRESSION print 1
  ARGUMENT
   ADD_EXPRESSION
    ADD_EXPRESSION
     STRING_EXPRESSION "i="
     IDENTIFIER_EXPRESSION i
    STRING_EXPRESSION "
"
EXPRESSION_STATEMENT
 NULL_EXPRESSION
EXPRESSION_STATEMENT
 FUNCTION_CALL_EXPRESSION f1 2
  ARGUMENT
   INT_EXPRESSION 10
  ARGUMENT
   STRING_EXPRESSION "hello, world"
EXPRESSION_STATEMENT
 ASSIGN_EXPRESSION
  IDENTIFIER_EXPRESSION a
  INT_EXPRESSION 10
EXPRESSION_STATEMENT
 FUNCTION_CALL_EXPRESSION print 1
  ARGUMENT
   ADD_EXPRESSION
    ADD_EXPRESSION
     STRING_EXPRESSION "a="
     POST_INCREMENT_EXPRESSION
      IDENTIFIER_EXPRESSION a
    STRING_EXPRESSION "
"
EXPRESSION_STATEMENT
 ASSIGN_EXPRESSION
  IDENTIFIER_EXPRESSION b
  PREV_INCREMENT_EXPRESSION
   IDENTIFIER_EXPRESSION a
EXPRESSION_STATEMENT
 FUNCTION_CALL_EXPRESSION print 1
  ARGUMENT
   ADD_EXPRESSION
    ADD_EXPRESSION
     ADD_EXPRESSION
      ADD_EXPRESSION
       STRING_EXPRESSION "a="
       IDENTIFIER_EXPRESSION a
      STRING_EXPRESSION ", b="
     IDENTIFIER_EXPRESSION b
    STRING_EXPRESSION "
"
EXPRESSION_STATEMENT
 ASSIGN_EXPRESSION
  IDENTIFIER_EXPRESSION a
  INT_EXPRESSION 10
EXPRESSION_STATEMENT
 FUNCTION_CALL_EXPRESSION print 1
  ARGUMENT
   ADD_EXPRESSION
    ADD_EXPRESSION
     STRING_EXPRESSION "a="
     POST_DECREMENT_EXPRESSION
      IDENTIFIER_EXPRESSION a
    STRING_EXPRESSION "
"
EXPRESSION_STATEMENT
 ASSIGN_EXPRESSION
  IDENTIFIER_EXPRESSION b
  PREV_DECREMENT_EXPRESSION
   IDENTIFIER_EXPRESSION a
EXPRESSION_STATEMENT
 FUNCTION_CALL_EXPRESSION print 1
  ARGUMENT
   ADD_EXPRESSION
    ADD_EXPRESSION
     ADD_EXPRESSION
      ADD_EXPRESSION
       STRING_EXPRESSION "a="
       IDENTIFIER_EXPRESSION a
      STRING_EXPRESSION ", b="
     IDENTIFIER_EXPRESSION b
    STRING_EXPRESSION "
"
